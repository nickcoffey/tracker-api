/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "../context"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  IdCompoundUniqueInput: { // input type
    id: number; // Int!
    workout_RoutineFolderId: number; // Int!
    workout_UserId: number; // Int!
  }
  RoutineFolderWhereUniqueInput: { // input type
    id?: NexusGenInputs['IdCompoundUniqueInput'] | null; // IdCompoundUniqueInput
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenRootTypes {
  Mutation: {};
  Query: {};
  RoutineFolder: { // root type
    id: number; // Int!
    name: string; // String!
  }
  User: { // root type
    email: string; // String!
    id: number; // Int!
    name: string; // String!
    password: string; // String!
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  IdCompoundUniqueInput: NexusGenInputs['IdCompoundUniqueInput'];
  RoutineFolderWhereUniqueInput: NexusGenInputs['RoutineFolderWhereUniqueInput'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
}

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createRoutineFolder: NexusGenRootTypes['RoutineFolder'] | null; // RoutineFolder
    createUser: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    routineFolder: NexusGenRootTypes['RoutineFolder'] | null; // RoutineFolder
    routineFolders: Array<NexusGenRootTypes['RoutineFolder'] | null> | null; // [RoutineFolder]
    user: NexusGenRootTypes['User'] | null; // User
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  RoutineFolder: { // field return type
    id: number; // Int!
    name: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  User: { // field return type
    email: string; // String!
    id: number; // Int!
    name: string; // String!
    password: string; // String!
    routineFolders: NexusGenRootTypes['RoutineFolder'][]; // [RoutineFolder!]!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createRoutineFolder: { // args
      name: string; // String!
      userId: number; // Int!
    }
    createUser: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
    }
  }
  Query: {
    routineFolder: { // args
      id: number; // Int!
    }
    routineFolders: { // args
      userId: number; // Int!
    }
    user: { // args
      id: number; // Int!
    }
  }
  User: {
    routineFolders: { // args
      after?: NexusGenInputs['RoutineFolderWhereUniqueInput'] | null; // RoutineFolderWhereUniqueInput
      before?: NexusGenInputs['RoutineFolderWhereUniqueInput'] | null; // RoutineFolderWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Mutation" | "Query" | "RoutineFolder" | "User";

export type NexusGenInputNames = "IdCompoundUniqueInput" | "RoutineFolderWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}